{"version":3,"sources":["components/header/header.jsx","components/resultado/resultado.jsx","components/options/options.jsx","App.js","serviceWorker.js","index.js"],"names":["header","props","appName","resultado","id","className","score","result","alt","src","winner","options","map","item","index","selected","key","onClick","e","click","target","toggleCSS","value","App","condition","useState","userChoice","systemChoice","RockPaperScissors","setRockPaperScissors","btn","setBtn","chooseRandom","number","Math","floor","random","choose","choosed","localScore","myChoice","status","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOASeA,G,MAPA,SAACC,GACd,OACE,gCACE,4BAAKA,EAAMC,YCmBFC,EAtBG,SAACF,GAEjB,OACE,6BAASG,GAAG,aACV,yBAAKC,UAAU,WACb,yBAAKA,UAAU,SAAf,WAAgCJ,EAAMK,OACtC,yBAAKD,UAAU,UACK,OAAjBJ,EAAMM,OACL,yBACEC,IAAKP,EAAMM,OACXE,IAAG,sCAAiCR,EAAMM,OAAvC,UAGL,IAGJ,yBAAKF,UAAU,UAAUJ,EAAMS,WCIxBC,EAnBC,SAACV,GAIf,OACE,6BAASG,GAAG,UACV,4BACGH,EAAMU,QAAQC,KAAI,SAACC,EAAKC,GACvB,OACE,wBAAIT,UAAWJ,EAAMc,WAAWF,EAAK,SAAS,aAC5C,4BAAQG,IAAKF,EAAOT,UAAWQ,EAAMI,QAAS,SAACC,GAAD,OAT1D,SAAmBA,EAAGL,GACpBZ,EAAMkB,MAAMD,EAAEE,OAAQP,GAQyCQ,CAAUH,EAAGL,IAAOS,MAAOT,WC+D/EU,MArEf,WACE,IAAMZ,EAAU,CAAC,OAAQ,QAAS,YAC5Ba,EAAY,CAAC,MAAM,OAAO,SAFnB,EAMqCC,mBAAS,CAACC,WAAW,KAAMC,aAAa,KAAMpB,OAAO,KAAMD,MAAM,IANtG,mBAMNsB,EANM,KAMaC,EANb,OAOOJ,qBAPP,mBAONK,EAPM,KAODC,EAPC,KA4CPC,EAAe,WACnB,IAAMC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKE,UAE/B,OADezB,EAAQsB,IAMzB,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAQH,QAAQ,iBAChB,8BACE,kBAAC,EAAD,CAAWmC,OAAQT,EAAkBF,WAAYnB,OAAQqB,EAAkBD,aAAcjB,OAAQkB,EAAkBrB,OAAQD,MAAOsB,EAAkBtB,QACpJ,kBAAC,EAAD,CAASK,QAASA,EAASI,SAAUe,EAAKX,MAhDhD,SAAuBmB,EAASzB,GAC9BkB,EAAOlB,GACP,IAAI0B,EAAaX,EAAkBtB,MAC7BqB,EAAeK,IACfQ,EAAWF,EAAQhB,MACrBmB,EAAS,KACVD,IAAab,EACdc,EAASjB,EAAU,GAEXgB,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,GACxD8B,EAASjB,EAAU,GAEVgB,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,IAIhD6B,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,IAHzD8B,EAASjB,EAAU,GACnBe,GAAY,IAMHC,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,IAGhD6B,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,GAFzD8B,EAASjB,EAAU,GAKVgB,IAAW7B,EAAQ,IAAMgB,IAAehB,EAAQ,KACzD8B,EAASjB,EAAU,GACnBe,GAAY,IAEdG,QAAQC,IAAIH,GACZX,EAAqB,CAACH,WAAWc,EAAUb,aAAcA,EAAcpB,OAAQkC,EAAQnC,MAAOiC,UCnC9EK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.59c31ade.chunk.js","sourcesContent":["import React from 'react';\n\nconst header = (props) => {\n  return (\n    <header>\n      <h1>{props.appName}</h1>\n    </header>\n  );\n};\nexport default header;\n","import React from 'react';\n\nconst resultado = (props) => {\n  \n  return (\n    <section id='resultado'>\n      <div className='wrapper'>\n        <div className='score'>Pontos: {props.score}</div>\n        <div className='result'>\n          {props.result !== null ? (\n            <img\n              alt={props.result}\n              src={`/apps/jokenpo/assets/images/${props.result}.png`}\n            />\n          ) : (\n            ''\n          )}\n        </div>\n        <div className='winner'>{props.winner}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default resultado;\n","import React from 'react';\n\n\nconst options = (props) => {\n  function toggleCSS(e, item){\n    props.click(e.target, item)\n  }\n  return (\n    <section id='opcoes'>\n      <ul>\n        {props.options.map((item,index) => {\n          return (\n            <li className={props.selected===item?'border':'no-border'}>\n              <button key={index} className={item} onClick={(e) => toggleCSS(e, item)} value={item}></button>\n            </li>\n          );\n        })}\n      </ul>\n    </section>\n  );\n};\n\nexport default options;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Header from './components/header/header'\nimport Resultado from './components/resultado/resultado'\nimport Options from './components/options/options'\n\nfunction App() {\n  const options = ['Rock', 'Paper', 'Scissors']\n  const condition = ['WIN','DRAW','LOOSE']\n\n  // const [choose, setChoose] = useState({userChoice:null, score:0})\n  // const [status, setStatus] = useState(null)\n  const [RockPaperScissors, setRockPaperScissors] = useState({userChoice:null, systemChoice:null, result:null, score:0})\n  const [btn, setBtn]=useState()\n\n  function chooseHandler(choosed, item) {\n    setBtn(item)\n    let localScore = RockPaperScissors.score\n    const systemChoice = chooseRandom() // set system choose\n    const myChoice = choosed.value\n    let status = null\n    if(myChoice === systemChoice){\n      status = condition[1] // draw\n      // rock - paper\n    } else if(myChoice===options[0] && systemChoice===options[1]){\n      status = condition[2] // loose\n      // rock - scissor\n    } else if (myChoice===options[0] && systemChoice===options[2]){\n      status = condition[0] // win\n      localScore+=10\n      // paper - rock\n    } else if (myChoice===options[1] && systemChoice===options[0]){\n      status = condition[0] // win\n      localScore+=10\n      // paper - scissors\n    } else if (myChoice===options[1] && systemChoice===options[2]){\n      status = condition[2] // loose\n      // scissor - rock\n    } else if (myChoice===options[2] && systemChoice===options[0]){\n      status = condition[2] // loose\n      // scissor - paper\n    } else if (myChoice===options[2] && systemChoice===options[1]){\n      status = condition[0] // win\n      localScore+=10\n    }\n    console.log(myChoice)\n    setRockPaperScissors({userChoice:myChoice, systemChoice: systemChoice, result: status, score: localScore})\n    \n  }\n\n  const chooseRandom = ()=>{\n    const number = Math.floor(Math.random() * 3)\n    const result = options[number]\n    return result\n  }\n\n\n \n  return (\n    <div className=\"App\">\n      <Header appName=\"Jokenpo v.01\" />\n      <main>\n        <Resultado choose={RockPaperScissors.userChoice} result={RockPaperScissors.systemChoice} winner={RockPaperScissors.result} score={RockPaperScissors.score} />\n        <Options options={options} selected={btn} click={chooseHandler} />\n      </main>\n      {/* <nav>\n        <ul>\n          <li><button>Jogo</button></li>\n          <li><button>Config</button></li>\n        </ul>\n      </nav> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}